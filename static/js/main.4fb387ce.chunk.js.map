{"version":3,"sources":["ItemGrid.jsx","App.js","reportWebVitals.js","index.js"],"names":["chars","checkIsRemoved","url","a","Promise","resolve","fetch","then","result","isRemoved","substring","console","log","error","randomString","length","i","Math","round","random","generateImgurURLS","num","urls","randomKey","myURL","push","ItemGrid","useState","items","state","setState","fetchMoreData","newURLS","concat","useEffect","windowHeight","window","innerHeight","document","documentElement","offsetHeight","body","html","docHeight","max","scrollHeight","clientHeight","windowBottom","pageYOffset","className","dataLength","next","hasMore","hasChildren","loader","style","color","pullDownToRefreshContent","textAlign","rowHeight","margin","images","map","index","src","thumbnail","thumbnailWidth","thumbnailHeight","backgroundColor","h1","header","align","textColor","marginBottom","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.4fb387ce.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport Image from 'react-bootstrap/Image'\r\nimport Gallery from 'react-grid-gallery'\r\n\r\nconst chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\r\n\r\nconst style = {\r\n    // height: 30,\r\n    margin: 6,\r\n    display: 'flex',\r\n    // padding: 8\r\n}\r\n\r\n\r\n\r\nasync function checkIsRemoved(url) {\r\n    return new Promise(resolve => {\r\n        fetch(url, {\r\n            'Content-Type': 'application/json',\r\n            })\r\n                .then((result) => {\r\n                let isRemoved = result.url.substring(20,27) == 'removed'\r\n                console.log(result)\r\n                if (isRemoved) {\r\n                    console.log(`${url} is removed`)\r\n                    resolve(true)\r\n                }\r\n                resolve(false)\r\n                }, (error) => {\r\n                console.log(error)\r\n                console.log(\"Invalid imgur url\")\r\n            })\r\n    })\r\n    \r\n\r\n    \r\n}\r\n\r\nfunction randomString(length, chars) {\r\n    var result = '';\r\n    for (var i = length; i > 0; --i) result += chars[Math.round(Math.random() * (chars.length - 1))];\r\n    return result;\r\n  }\r\n\r\n\r\nasync function generateImgurURLS(num) {\r\n    \r\n        console.log(`Generating ${num} valid imgur urls`)\r\n    \r\n        let urls = []\r\n        for(let i = 0; i < num; i++){\r\n            // var image = {}\r\n            var randomKey = randomString(5, chars)\r\n            var myURL = `https://i.imgur.com/${randomKey}t.jpg`\r\n            let isRemoved = await checkIsRemoved(myURL)\r\n            while (isRemoved){\r\n                console.log(\"generating new url\")\r\n                randomKey = randomString(5, chars)\r\n                myURL = `https://i.imgur.com/${randomKey}t.jpg`\r\n                isRemoved = await checkIsRemoved(myURL)\r\n            }\r\n            \r\n            urls.push(myURL)\r\n        }\r\n        return urls\r\n  \r\n}\r\n\r\nfunction ItemGrid() {\r\n\r\n    const [state, setState] = useState({items: [] })\r\n\r\n    useEffect(() => {\r\n        const windowHeight = \"innerHeight\" in window ? window.innerHeight : document.documentElement.offsetHeight;\r\n        const body = document.body;\r\n        const html = document.documentElement;\r\n        const docHeight = Math.max(body.scrollHeight, body.offsetHeight, html.clientHeight, html.scrollHeight, html.offsetHeight);\r\n        const windowBottom = windowHeight + window.pageYOffset;\r\n        if (windowBottom >= docHeight){\r\n            console.log(`Window bottom is ${windowBottom}`)\r\n            console.log(`Document height is ${docHeight}`)\r\n            fetchMoreData()\r\n        }\r\n        \r\n    },[state.items])\r\n    \r\n    async function fetchMoreData() {\r\n        \r\n        let newURLS = await generateImgurURLS(1)\r\n        console.log(newURLS)\r\n        setState({items: state.items.concat(newURLS)})\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='container'>\r\n            <InfiniteScroll\r\n                dataLength = {state.items.length}\r\n                next = {fetchMoreData}\r\n                hasMore={true}\r\n                hasChildren={true}\r\n                loader={<h4 style={{color: 'white'}}>Loading...</h4>}\r\n                pullDownToRefreshContent={\r\n                    <h3 style={{textAlign: 'center'}}>&h8595; Pull down to refresh</h3>\r\n                }\r\n            >\r\n                <Gallery rowHeight={300} margin={5} images={state.items.map((url, index) => (\r\n                    {src: url.substring(0,25).concat(\".jpg\"), thumbnail: url, thumbnailWidth: 320, thumbnailHeight: 320}\r\n                ))}/>\r\n                \r\n            </InfiniteScroll>\r\n            \r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default ItemGrid","import React, { useEffect, useState} from 'react'\nimport ItemGrid from './ItemGrid.jsx'\nimport './App.css';\n\n\nconst style = {\n  body: {\n    backgroundColor: 'black',\n  },\n\n  h1: {\n    color: 'white',\n  },\n  \n  header: {\n    align: 'center',\n    textAlign: 'center',\n    textColor: 'white',\n  },\n  images: {\n    margin: 80,\n    marginBottom: 0,\n    align: 'center',\n  }\n  \n}\n\nfunction App() {\n\n  \n\n  return (\n    <body style={style.body}>\n      <div>\n      <header style={style.header}>\n      <h1 style={style.h1}>Random Imgur Images (May be NSFW)</h1>\n      </header>\n      <div style = {style.images}>\n        <ItemGrid />\n      </div>\n      \n    </div>\n    </body>\n    \n    \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}